import pystray
from PIL import Image, ImageDraw
import threading
import os
import sys
import queue
from core.i18n import get_language_manager, _

# Import Windows API cho tray handling
try:
    import win32gui
    import win32con
    import win32api
    WIN32_AVAILABLE = True
    print("‚úÖ Windows API available for tray handling")
except ImportError:
    WIN32_AVAILABLE = False
    print("‚ö†Ô∏è Windows API not available, using fallback")

def get_app_version():
    """ƒê·ªçc version t·ª´ file version.json"""
    try:
        import json
        # Th·ª≠ ƒë·ªçc t·ª´ th∆∞ m·ª•c g·ªëc tr∆∞·ªõc
        base_path = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
        version_file = os.path.join(base_path, "version.json")
        if os.path.exists(version_file):
            with open(version_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                return data.get('version', '1.0.0')
        
        # Th·ª≠ ƒë·ªçc t·ª´ core/version.json
        core_version_file = os.path.join(os.path.dirname(__file__), "version.json")
        if os.path.exists(core_version_file):
            with open(core_version_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                return data.get('version', '1.0.0')
    except Exception:
        pass
    return '1.0.0'

def resource_path(relative_path):
    # L·∫•y ƒë∆∞·ªùng d·∫´n th·ª±c t·∫ø t·ªõi resource, h·ªó tr·ª£ c·∫£ khi ƒë√≥ng g√≥i b·∫±ng PyInstaller
    if hasattr(sys, '_MEIPASS'):
        base_path = sys._MEIPASS
    else:
        # L·∫•y th∆∞ m·ª•c g·ªëc project (1 c·∫•p tr√™n)
        base_path = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    return os.path.join(base_path, relative_path)

def create_image(floating_button_enabled=False):
    # Ch·ªçn icon d·ª±a tr√™n tr·∫°ng th√°i floating button
    icon_name = 'icon_ON.ico' if floating_button_enabled else 'icon_OFF.ico'
    icon_path = resource_path(os.path.join('Resource', icon_name))
    
    if os.path.exists(icon_path):
        return Image.open(icon_path)
    
    # T·∫°o icon m·∫∑c ƒë·ªãnh d·ª±a tr√™n tr·∫°ng th√°i
    img = Image.new('RGBA', (32, 32), (255, 255, 255, 0))
    draw = ImageDraw.Draw(img)
    
    if floating_button_enabled:
        # Icon ON: m√†u xanh d∆∞∆°ng s√°ng
        draw.ellipse((4, 4, 28, 28), fill=(30, 144, 255, 255))
        draw.text((10, 8), "T", fill=(255,255,255,255))
    else:
        # Icon OFF: m√†u x√°m
        draw.ellipse((4, 4, 28, 28), fill=(128, 128, 128, 255))
        draw.text((10, 8), "T", fill=(255,255,255,255))
    
    return img

def load_floating_button_enabled():
    """Load tr·∫°ng th√°i floating button t·ª´ startup.json"""
    try:
        import json
        startup_file = "startup.json"
        if os.path.exists(startup_file):
            with open(startup_file, "r", encoding="utf-8") as f:
                data = json.load(f)
                return bool(data.get("floating_button", False))
    except Exception:
        pass
    return False

def load_auto_close_popup_enabled():
    """Load tr·∫°ng th√°i auto close popup t·ª´ startup.json"""
    try:
        import json
        startup_file = "startup.json"
        if os.path.exists(startup_file):
            with open(startup_file, "r", encoding="utf-8") as f:
                data = json.load(f)
                return bool(data.get("auto_close_popup", True))  # M·∫∑c ƒë·ªãnh b·∫≠t
    except Exception:
        pass
    return True  # M·∫∑c ƒë·ªãnh b·∫≠t

def create_tray_icon(root, app):
    # Bi·∫øn ƒë·ªÉ track tr·∫°ng th√°i floating button v√† auto close popup
    floating_button_enabled = load_floating_button_enabled()
    auto_close_popup_enabled = load_auto_close_popup_enabled()
    
    # Queue ƒë·ªÉ communicate gi·ªØa Windows API callback v√† main thread
    tray_action_queue = queue.Queue()
    
    def process_tray_actions():
        """X·ª≠ l√Ω actions t·ª´ Windows API trong main thread"""
        try:
            while True:
                action = tray_action_queue.get_nowait()
                if action == 'toggle_floating':
                    toggle_floating_button()
                elif action == 'toggle_auto_close_popup':
                    toggle_auto_close_popup()
                elif action == 'show_window':
                    on_show()
                elif action == 'exit':
                    on_quit()
        except queue.Empty:
            pass
        # Schedule l·∫°i sau 50ms
        root.after(50, process_tray_actions)
    
    # B·∫Øt ƒë·∫ßu x·ª≠ l√Ω actions
    root.after(100, process_tray_actions)
    
    def save_floating_button_enabled(enabled):
        """L∆∞u tr·∫°ng th√°i floating button v√†o startup.json"""
        try:
            import json
            startup_file = "startup.json"
            data = {}
            if os.path.exists(startup_file):
                with open(startup_file, "r", encoding="utf-8") as f:
                    data = json.load(f)
            
            data["floating_button"] = enabled
            
            with open(startup_file, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            print(f"üíæ Saved floating button state: {enabled}")
        except Exception as e:
            print(f"‚ùå Error saving floating button state: {e}")

    def save_auto_close_popup_enabled(enabled):
        """L∆∞u tr·∫°ng th√°i auto close popup v√†o startup.json"""
        try:
            import json
            startup_file = "startup.json"
            data = {}
            if os.path.exists(startup_file):
                with open(startup_file, "r", encoding="utf-8") as f:
                    data = json.load(f)
            
            data["auto_close_popup"] = enabled
            
            with open(startup_file, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            print(f"üíæ Saved auto close popup state: {enabled}")
        except Exception as e:
            print(f"‚ùå Error saving auto close popup state: {e}")

    def update_tray_icon():
        """C·∫≠p nh·∫≠t icon c·ªßa tray d·ª±a tr√™n tr·∫°ng th√°i floating button v√† auto close popup"""
        nonlocal icon, floating_button_enabled, auto_close_popup_enabled
        try:
            # Reload tr·∫°ng th√°i m·ªõi nh·∫•t t·ª´ file (cho tr∆∞·ªùng h·ª£p GUI thay ƒë·ªïi)
            floating_button_enabled = load_floating_button_enabled()
            auto_close_popup_enabled = load_auto_close_popup_enabled()
            
            new_image = create_image(floating_button_enabled)
            icon.icon = new_image
            
            # T·∫°o menu m·ªõi v·ªõi t·∫•t c·∫£ handlers (bao g·ªìm c·∫£ hidden menu item cho left-click)
            new_menu = pystray.Menu(
                # Hidden default item cho left-click compatibility
                pystray.MenuItem("Toggle Floating Button", on_left_click, default=True, visible=False),
                # Menu items hi·ªÉn th·ªã
                pystray.MenuItem(
                    f"{'‚úÖ' if floating_button_enabled else 'üü©'} {_('floating_button_toggle')}", 
                    menu_toggle_floating
                ),
                pystray.MenuItem(
                    f"{'‚úÖ' if auto_close_popup_enabled else 'üü©'} {_('auto_close_popup')}", 
                    menu_toggle_auto_close_popup
                ),
                pystray.Menu.SEPARATOR,
                pystray.MenuItem(_('tray_show_window'), menu_show_window),
                pystray.MenuItem(_('tray_exit'), menu_exit)
            )
            
            # C·∫≠p nh·∫≠t menu
            icon.menu = new_menu
            
            # ƒê·∫£m b·∫£o left-click handler v·∫´n ho·∫°t ƒë·ªông sau khi c·∫≠p nh·∫≠t menu
            try:
                # Re-assign default action
                icon.default_action = on_left_click
                print("‚úÖ Left-click handler re-assigned after menu update")
            except Exception as e:
                print(f"‚ö†Ô∏è Could not re-assign left-click handler: {e}")
            
            print(f"üîÑ Tray icon and menu updated: floating_button_enabled = {floating_button_enabled}, auto_close_popup_enabled = {auto_close_popup_enabled}")
        except Exception as e:
            print(f"‚ùå Error updating tray icon: {e}")

    def toggle_floating_button():
        """Toggle tr·∫°ng th√°i floating button"""
        nonlocal floating_button_enabled
        floating_button_enabled = not floating_button_enabled
        
        # L∆∞u tr·∫°ng th√°i m·ªõi
        save_floating_button_enabled(floating_button_enabled)
        
        # C·∫≠p nh·∫≠t icon
        update_tray_icon()
        
        # G·ªçi callback ƒë·ªÉ c·∫≠p nh·∫≠t ch·ª©c nƒÉng floating button
        try:
            # Import t·ª´ ITM_Translate.py ƒë·ªÉ g·ªçi function set_floating_button_enabled
            import sys
            main_module = sys.modules.get('__main__')
            if main_module and hasattr(main_module, 'set_floating_button_enabled'):
                main_module.set_floating_button_enabled(floating_button_enabled)
            
            # C·∫≠p nh·∫≠t GUI n·∫øu c√≥
            if hasattr(app, 'floating_button_enabled') and app.floating_button_enabled:
                root.after(0, lambda: app.floating_button_enabled.set(floating_button_enabled))
                
            print(f"üñ±Ô∏è Floating button toggled: {floating_button_enabled}")
        except Exception as e:
            print(f"‚ùå Error toggling floating button: {e}")

    def toggle_auto_close_popup():
        """Toggle tr·∫°ng th√°i auto close popup"""
        nonlocal auto_close_popup_enabled
        auto_close_popup_enabled = not auto_close_popup_enabled
        
        # L∆∞u tr·∫°ng th√°i m·ªõi
        save_auto_close_popup_enabled(auto_close_popup_enabled)
        
        # C·∫≠p nh·∫≠t icon (menu s·∫Ω ƒë∆∞·ª£c update)
        update_tray_icon()
        
        # G·ªçi callback ƒë·ªÉ c·∫≠p nh·∫≠t ch·ª©c nƒÉng auto close popup
        try:
            # C·∫≠p nh·∫≠t GUI n·∫øu c√≥
            if hasattr(app, 'auto_close_popup_var') and app.auto_close_popup_var:
                root.after(0, lambda: app.auto_close_popup_var.set(auto_close_popup_enabled))
            
            # Import function save_auto_close_popup t·ª´ ITM_Translate.py n·∫øu c√≥
            import sys
            main_module = sys.modules.get('__main__')
            if main_module and hasattr(main_module, 'save_auto_close_popup'):
                main_module.save_auto_close_popup(auto_close_popup_enabled)
                
            print(f"üñ±Ô∏è Auto close popup toggled: {auto_close_popup_enabled}")
        except Exception as e:
            print(f"‚ùå Error toggling auto close popup: {e}")

    def on_show():
        """Hi·ªán c·ª≠a s·ªï ch√≠nh"""
        try:
            root.after(0, lambda: (root.deiconify(), root.lift(), root.focus_force()))
            print("Tray: Show window triggered")
        except Exception as e:
            print(f"Tray: Error showing window: {e}")
    
    def on_quit():
        """Tho√°t ·ª©ng d·ª•ng"""
        root.after(0, root.destroy)
        icon.stop()
        try:
            from lockfile import release_lock
            release_lock()
        except Exception:
            pass
        os._exit(0)

    # T·∫°o tray icon v·ªõi tr·∫°ng th√°i hi·ªán t·∫°i
    app_version = get_app_version()
    
    # Left-click handler ƒë∆°n gi·∫£n cho pystray
    def on_left_click(icon, item):
        """X·ª≠ l√Ω left-click - Toggle floating button"""
        print("üñ±Ô∏è Tray: Left-click detected - Toggling floating button")
        tray_action_queue.put('toggle_floating')

    # Menu items v·ªõi click handlers
    def menu_toggle_floating():
        """Menu item ƒë·ªÉ toggle floating button"""
        print("üìã Tray Menu: Toggle floating button clicked")
        tray_action_queue.put('toggle_floating')
    
    def menu_toggle_auto_close_popup():
        """Menu item ƒë·ªÉ toggle auto close popup"""
        print("üìã Tray Menu: Toggle auto close popup clicked")
        tray_action_queue.put('toggle_auto_close_popup')
    
    def menu_show_window():
        """Menu item ƒë·ªÉ hi·ªán c·ª≠a s·ªï"""
        print("üìã Tray Menu: Show window clicked")
        tray_action_queue.put('show_window')
    
    def menu_exit():
        """Menu item ƒë·ªÉ tho√°t"""
        print("üìã Tray Menu: Exit clicked")
        tray_action_queue.put('exit')
    
    icon = pystray.Icon(
        f'ITM Translate v{app_version}', 
        create_image(floating_button_enabled), 
        menu=pystray.Menu(
            # Hidden default item cho left-click compatibility
            pystray.MenuItem("Toggle Floating Button", on_left_click, default=True, visible=False),
            # Menu items hi·ªÉn th·ªã
            pystray.MenuItem(
                f"{'‚úÖ' if floating_button_enabled else 'üü©'} {_('floating_button_toggle')}", 
                menu_toggle_floating
            ),
            pystray.MenuItem(
                f"{'‚úÖ' if auto_close_popup_enabled else 'üü©'} {_('auto_close_popup')}", 
                menu_toggle_auto_close_popup
            ),
            pystray.Menu.SEPARATOR,
            pystray.MenuItem(_('tray_show_window'), menu_show_window),
            pystray.MenuItem(_('tray_exit'), menu_exit)
        )
    )
    
    # Th·ª≠ nhi·ªÅu c√°ch g√°n left-click handler
    try:
        # Method 1: default_action
        icon.default_action = on_left_click
        print("‚úÖ Method 1: default_action assigned")
    except Exception as e:
        print(f"‚ùå Method 1 failed: {e}")
    
    try:
        # Method 2: Th√™m menu item ·∫©n cho left-click
        # M·ªôt s·ªë version pystray c·∫ßn menu item ƒë·∫ßu ti√™n l√†m default action
        original_menu = icon.menu
        icon.menu = pystray.Menu(
            pystray.MenuItem("Toggle Floating Button", on_left_click, default=True, visible=False),
            *original_menu
        )
        print("‚úÖ Method 2: Hidden default menu item added")
    except Exception as e:
        print(f"‚ùå Method 2 failed: {e}")
    
    try:
        # Method 3: Monkey patch icon's _on_click n·∫øu c√≥
        if hasattr(icon, '_on_click'):
            original_on_click = icon._on_click
            def patched_on_click(icon, button, time):
                try:
                    # Check if it's left button
                    if str(button).lower() == 'button.left' or (hasattr(button, 'name') and button.name == 'left'):
                        print("üñ±Ô∏è Tray: Patched left-click detected")
                        tray_action_queue.put('toggle_floating')
                        return
                except Exception:
                    pass
                # Fallback to original
                if original_on_click:
                    original_on_click(icon, button, time)
            
            icon._on_click = patched_on_click
            print("‚úÖ Method 3: Monkey patched _on_click")
        else:
            print("‚ö†Ô∏è Method 3: _on_click not found")
    except Exception as e:
        print(f"‚ùå Method 3 failed: {e}")
    
    # G√°n left-click handler
    icon.default_action = on_left_click
    
    try:
        # Method 4: Th·ª≠ v·ªõi double-click thay v√¨ single-click
        def on_double_click(icon, item):
            """X·ª≠ l√Ω double-click - Toggle floating button"""
            print("üñ±Ô∏è Tray: Double-click detected - Toggling floating button")
            tray_action_queue.put('toggle_floating')
        
        # M·ªôt s·ªë h·ªá th·ªëng ch·ªâ h·ªó tr·ª£ double-click cho tray icons
        if hasattr(icon, 'on_activate'):
            icon.on_activate = on_double_click
            print("‚úÖ Method 4: Double-click handler assigned")
        else:
            print("‚ö†Ô∏è Method 4: on_activate not supported")
    except Exception as e:
        print(f"‚ùå Method 4 failed: {e}")
    
    # Ch·∫°y tray icon trong thread ri√™ng
    threading.Thread(target=icon.run, daemon=True).start()
    
    # Khi ƒë√≥ng c·ª≠a s·ªï, ·∫©n thay v√¨ tho√°t
    def on_window_close():
        print("Tray: Window closing, minimizing to tray")
        root.withdraw()
    
    root.protocol('WM_DELETE_WINDOW', on_window_close)
    
    # T·∫°o wrapper object ƒë·ªÉ expose update_tray_icon method
    class TrayWrapper:
        def __init__(self, icon, update_func):
            self.icon = icon
            self.update_tray_icon = update_func
            
        def stop(self):
            """Delegate stop method to icon"""
            return self.icon.stop()
            
        def __getattr__(self, name):
            """Delegate other attributes to icon"""
            return getattr(self.icon, name)
    
    return TrayWrapper(icon, update_tray_icon)
