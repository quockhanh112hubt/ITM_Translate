import pystray
from pystray import mouse
from PIL import Image, ImageDraw
import threading
import os
import sys
from core.i18n import get_language_manager, _

# Import Windows GUI libraries for advanced tray handling
try:
    import win32gui
    import win32con
    WIN32_AVAILABLE = True
except ImportError:
    WIN32_AVAILABLE = False

def get_app_version():
    """ƒê·ªçc version t·ª´ file version.json"""
    try:
        import json
        # Th·ª≠ ƒë·ªçc t·ª´ th∆∞ m·ª•c g·ªëc tr∆∞·ªõc
        base_path = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
        version_file = os.path.join(base_path, "version.json")
        if os.path.exists(version_file):
            with open(version_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                return data.get('version', '1.0.0')
        
        # Th·ª≠ ƒë·ªçc t·ª´ core/version.json
        core_version_file = os.path.join(os.path.dirname(__file__), "version.json")
        if os.path.exists(core_version_file):
            with open(core_version_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                return data.get('version', '1.0.0')
    except Exception:
        pass
    return '1.0.0'

def resource_path(relative_path):
    # L·∫•y ƒë∆∞·ªùng d·∫´n th·ª±c t·∫ø t·ªõi resource, h·ªó tr·ª£ c·∫£ khi ƒë√≥ng g√≥i b·∫±ng PyInstaller
    if hasattr(sys, '_MEIPASS'):
        base_path = sys._MEIPASS
    else:
        # L·∫•y th∆∞ m·ª•c g·ªëc project (1 c·∫•p tr√™n)
        base_path = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    return os.path.join(base_path, relative_path)

def create_image(floating_button_enabled=False):
    # Ch·ªçn icon d·ª±a tr√™n tr·∫°ng th√°i floating button
    icon_name = 'icon_ON.ico' if floating_button_enabled else 'icon_OFF.ico'
    icon_path = resource_path(os.path.join('Resource', icon_name))
    
    # Debug: in ra ƒë∆∞·ªùng d·∫´n icon th·ª±c t·∫ø
    # print(f"Icon path: {icon_path} (floating_button_enabled: {floating_button_enabled})")
    
    if os.path.exists(icon_path):
        return Image.open(icon_path)
    
    # T·∫°o icon m·∫∑c ƒë·ªãnh d·ª±a tr√™n tr·∫°ng th√°i
    img = Image.new('RGBA', (32, 32), (255, 255, 255, 0))
    draw = ImageDraw.Draw(img)
    
    if floating_button_enabled:
        # Icon ON: m√†u xanh d∆∞∆°ng s√°ng
        draw.ellipse((4, 4, 28, 28), fill=(30, 144, 255, 255))
        draw.text((10, 8), "T", fill=(255,255,255,255))
    else:
        # Icon OFF: m√†u x√°m
        draw.ellipse((4, 4, 28, 28), fill=(128, 128, 128, 255))
        draw.text((10, 8), "T", fill=(255,255,255,255))
    
    return img

def load_floating_button_enabled():
    """Load tr·∫°ng th√°i floating button t·ª´ startup.json"""
    try:
        import json
        startup_file = "startup.json"
        if os.path.exists(startup_file):
            with open(startup_file, "r", encoding="utf-8") as f:
                data = json.load(f)
                return bool(data.get("floating_button", False))  # M·∫∑c ƒë·ªãnh t·∫Øt
    except Exception:
        pass
    return False  # M·∫∑c ƒë·ªãnh t·∫Øt

def create_tray_icon(root, app):
    # Bi·∫øn ƒë·ªÉ track tr·∫°ng th√°i floating button
    floating_button_enabled = load_floating_button_enabled()
    
    def save_floating_button_enabled(enabled):
        """L∆∞u tr·∫°ng th√°i floating button v√†o startup.json"""
        try:
            import json
            startup_file = "startup.json"
            data = {}
            if os.path.exists(startup_file):
                with open(startup_file, "r", encoding="utf-8") as f:
                    data = json.load(f)
            
            data["floating_button"] = enabled
            
            with open(startup_file, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            print(f"üíæ Saved floating button state: {enabled}")
        except Exception as e:
            print(f"‚ùå Error saving floating button state: {e}")

    def update_tray_icon():
        """C·∫≠p nh·∫≠t icon c·ªßa tray d·ª±a tr√™n tr·∫°ng th√°i floating button"""
        nonlocal icon
        try:
            new_image = create_image(floating_button_enabled)
            icon.icon = new_image
            
            # C·∫≠p nh·∫≠t menu
            icon.menu = pystray.Menu(
                pystray.MenuItem(
                    f"{'‚úÖ' if floating_button_enabled else '‚ùå'} {_('floating_button_toggle')}", 
                    menu_toggle_floating
                ),
                pystray.Menu.SEPARATOR,
                pystray.MenuItem(_('tray_show_window'), menu_show_window),
                pystray.MenuItem(_('tray_exit'), menu_exit)
            )
            
            print(f"üîÑ Tray icon and menu updated: floating_button_enabled = {floating_button_enabled}")
        except Exception as e:
            print(f"‚ùå Error updating tray icon: {e}")

    def toggle_floating_button():
        """Toggle tr·∫°ng th√°i floating button"""
        nonlocal floating_button_enabled
        floating_button_enabled = not floating_button_enabled
        
        # L∆∞u tr·∫°ng th√°i m·ªõi
        save_floating_button_enabled(floating_button_enabled)
        
        # C·∫≠p nh·∫≠t icon
        update_tray_icon()
        
        # G·ªçi callback ƒë·ªÉ c·∫≠p nh·∫≠t ch·ª©c nƒÉng floating button
        try:
            # Import t·ª´ ITM_Translate.py ƒë·ªÉ g·ªçi function set_floating_button_enabled
            import sys
            main_module = sys.modules.get('__main__')
            if main_module and hasattr(main_module, 'set_floating_button_enabled'):
                main_module.set_floating_button_enabled(floating_button_enabled)
            
            # C·∫≠p nh·∫≠t GUI n·∫øu c√≥
            if hasattr(app, 'floating_button_enabled') and app.floating_button_enabled:
                root.after(0, lambda: app.floating_button_enabled.set(floating_button_enabled))
                
            print(f"üñ±Ô∏è Floating button toggled: {floating_button_enabled}")
        except Exception as e:
            print(f"‚ùå Error toggling floating button: {e}")

    def on_show():
        """Hi·ªán c·ª≠a s·ªï ch√≠nh"""
        try:
            root.after(0, lambda: (root.deiconify(), root.lift(), root.focus_force()))
            print("Tray: Show window triggered")  # Debug log
        except Exception as e:
            print(f"Tray: Error showing window: {e}")
    
    def on_quit():
        """Tho√°t ·ª©ng d·ª•ng"""
        root.after(0, root.destroy)
        icon.stop()
        try:
            from lockfile import release_lock
            release_lock()
        except Exception:
            pass
        os._exit(0)
    
    def on_left_click(icon, item):
        """X·ª≠ l√Ω left-click - Toggle floating button"""
        print("üñ±Ô∏è Tray: Single-click detected - Toggling floating button")
        try:
            toggle_floating_button()
        except Exception as e:
            print(f"‚ùå Tray: Error in on_left_click: {e}")
    
    def on_right_click(icon, item):
        """X·ª≠ l√Ω right-click - Show menu"""
        print("üñ±Ô∏è Tray: Right-click detected - Menu will show")
        # Menu s·∫Ω t·ª± ƒë·ªông hi·ªán, kh√¥ng c·∫ßn x·ª≠ l√Ω g√¨ th√™m
    
    
    # T·∫°o tray icon v·ªõi tr·∫°ng th√°i hi·ªán t·∫°i
    app_version = get_app_version()
    
    # Menu items v·ªõi click handlers
    def menu_toggle_floating():
        """Menu item ƒë·ªÉ toggle floating button"""
        print("üìã Tray Menu: Toggle floating button clicked")
        toggle_floating_button()
    
    def menu_show_window():
        """Menu item ƒë·ªÉ hi·ªán c·ª≠a s·ªï"""
        print("üìã Tray Menu: Show window clicked")
        on_show()
    
    def menu_exit():
        """Menu item ƒë·ªÉ tho√°t"""
        print("üìã Tray Menu: Exit clicked")
        on_quit()
    
    icon = pystray.Icon(
        f'ITM Translate v{app_version}', 
        create_image(floating_button_enabled), 
        menu=pystray.Menu(
            pystray.MenuItem(
                f"{'‚úÖ' if floating_button_enabled else '‚ùå'} {_('floating_button_toggle')}", 
                menu_toggle_floating
            ),
            pystray.Menu.SEPARATOR,
            pystray.MenuItem(_('tray_show_window'), menu_show_window),
            pystray.MenuItem(_('tray_exit'), menu_exit)
        )
    )
    
    # Th√™m click handler tr·ª±c ti·∫øp cho pystray
    def on_click(icon, button, time):
        """Handler cho click events c·ªßa pystray"""
        if button == mouse.Button.left:
            print("üñ±Ô∏è Tray: pystray left-click detected")
            try:
                toggle_floating_button()
            except Exception as e:
                print(f"‚ùå Tray: Error in pystray click handler: {e}")
    
    # G√°n click handler
    try:
        icon.on_click = on_click
        print("‚úÖ Tray: pystray click handler assigned")
    except Exception as e:
        print(f"‚ö†Ô∏è Tray: Could not assign pystray click handler: {e}")
    
    def setup_click_handlers():
        """Setup click handlers cho tray icon"""
        print("üîß Tray: Setting up click handlers...")
        try:
            if WIN32_AVAILABLE:
                # S·ª≠ d·ª•ng Windows API ƒë·ªÉ x·ª≠ l√Ω tray messages
                print("üîß Tray: Setting up Windows API handlers")
                
                # Monkey patch pystray's message handling
                if hasattr(icon, '_listener') and hasattr(icon._listener, '_on_notify'):
                    original_on_notify = icon._listener._on_notify
                    
                    def enhanced_on_notify(hwnd, msg, wparam, lparam):
                        try:
                            # Ch·ªâ x·ª≠ l√Ω single-click, b·ªè double-click
                            if msg == 0x201:  # WM_LBUTTONDOWN
                                print("üñ±Ô∏è Tray: Single-click message received via Windows API")
                                on_left_click(icon, None)
                                return 0
                            # B·ªè x·ª≠ l√Ω double-click ƒë·ªÉ tr√°nh conflict
                        except Exception as e:
                            print(f"‚ùå Tray: Error in enhanced_on_notify: {e}")
                        
                        # G·ªçi handler g·ªëc
                        try:
                            return original_on_notify(hwnd, msg, wparam, lparam)
                        except Exception as e:
                            print(f"‚ùå Tray: Error in original_on_notify: {e}")
                            return 0
                    
                    icon._listener._on_notify = enhanced_on_notify
                    print("‚úÖ Tray: Windows API handlers installed successfully")
                else:
                    print("‚ö†Ô∏è Tray: Could not find _listener._on_notify, using fallback")
            else:
                print("‚ö†Ô∏è Tray: Windows API not available, using fallback")
            
            # Default action cho single-click (fallback)
            def default_action(icon, item=None):
                """Default action khi click"""
                print("üñ±Ô∏è Tray: Default action triggered - Toggling floating button")
                try:
                    toggle_floating_button()
                except Exception as e:
                    print(f"‚ùå Tray: Error in default_action: {e}")
            
            # G√°n default action
            icon.default_action = default_action
            print("‚úÖ Tray: Default action set")
            
        except Exception as e:
            print(f"‚ùå Tray: Error in setup_click_handlers: {e}")
            # Fallback minimal
            def minimal_fallback(icon, item=None):
                print("üñ±Ô∏è Tray: Minimal fallback action - Toggling floating button")
                try:
                    toggle_floating_button()
                except Exception as e:
                    print(f"‚ùå Tray: Error in minimal fallback: {e}")
            icon.default_action = minimal_fallback
    
    def run():
        """Ch·∫°y tray icon"""
        setup_click_handlers()
        print("Tray: Icon starting...")  # Debug log
        icon.run()
    
    
    # Ch·∫°y tray icon trong thread ri√™ng
    threading.Thread(target=run, daemon=True).start()
    
    # Khi ƒë√≥ng c·ª≠a s·ªï, ·∫©n thay v√¨ tho√°t
    def on_window_close():
        print("Tray: Window closing, minimizing to tray")  # Debug log
        root.withdraw()
    
    root.protocol('WM_DELETE_WINDOW', on_window_close)
    
    # Th√™m method ƒë·ªÉ update icon t·ª´ external modules
    icon.update_floating_button_state = lambda enabled: (
        setattr(icon, '_floating_button_enabled', enabled),
        update_icon_and_menu(enabled)
    )
    
    def update_icon_and_menu(enabled):
        """Update both icon and menu for external calls"""
        try:
            # Update internal state
            nonlocal floating_button_enabled
            floating_button_enabled = enabled
            
            # Update icon
            icon.icon = create_image(enabled)
            
            # Update menu
            icon.menu = pystray.Menu(
                pystray.MenuItem(
                    f"{'‚úÖ' if enabled else '‚ùå'} {_('floating_button_toggle')}", 
                    menu_toggle_floating
                ),
                pystray.Menu.SEPARATOR,
                pystray.MenuItem(_('tray_show_window'), menu_show_window),
                pystray.MenuItem(_('tray_exit'), menu_exit)
            )
            
            print(f"üîÑ External tray icon and menu update: floating_button_enabled = {enabled}")
        except Exception as e:
            print(f"‚ùå Error in external update: {e}")
    
    return icon
