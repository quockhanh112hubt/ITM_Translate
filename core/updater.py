import os
import sys
import json
import requests
import tempfile
import subprocess
import tkinter as tk
from tkinter import messagebox, ttk
import threading
import zipfile
import shutil
from datetime import datetime

class Updater:
    def __init__(self, current_version="1.0.0"):
        self.current_version = current_version
        self.config = self._load_config()
        self.update_server_url = self.config.get("update_server", {}).get("api_url", 
                                                "https://api.github.com/repos/quockhanh112hubt/ITM_Translate/releases/latest")
        self.download_url = None
        self.new_version = None
        self.temp_dir = None
        # Debug logging for v1.0.8
        print(f"üîÑ Updater v1.0.8 initialized - Enhanced update mechanism")
    
    def _load_config(self):
        """ƒê·ªçc config t·ª´ file config.json"""
        try:
            config_file = os.path.join(os.path.dirname(os.path.dirname(__file__)), "config.json")
            if os.path.exists(config_file):
                with open(config_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception:
            pass
        return {}
        
    def get_current_version(self):
        """ƒê·ªçc version hi·ªán t·∫°i t·ª´ file version.json"""
        try:
            version_file = os.path.join(os.path.dirname(__file__), "version.json")
            if os.path.exists(version_file):
                with open(version_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    return data.get('version', '1.0.0')
        except Exception:
            pass
        return '1.0.0'
    
    def check_for_updates(self):
        """Ki·ªÉm tra version m·ªõi t·ª´ server"""
        try:
            print(f"Checking for updates at: {self.update_server_url}")  # Debug log
            
            # Chu·∫©n b·ªã headers cho GitHub API
            headers = {
                'Accept': 'application/vnd.github.v3+json',
                'User-Agent': 'ITM-Translate-Updater'
            }
            
            # Th√™m GitHub token n·∫øu c√≥ (cho private repos)
            github_token = self.config.get("update_server", {}).get("github_token")
            if github_token:
                headers['Authorization'] = f'token {github_token}'
                print("Using GitHub token for private repository")
            
            # Th·ª≠ v·ªõi GitHub API
            response = requests.get(self.update_server_url, headers=headers, timeout=10)
            
            print(f"Response status: {response.status_code}")  # Debug log
            
            if response.status_code == 200:
                release_data = response.json()
                self.new_version = release_data['tag_name'].lstrip('v')
                
                # T√¨m file .exe trong assets
                for asset in release_data.get('assets', []):
                    if asset['name'].endswith('.exe'):
                        self.download_url = asset['browser_download_url']
                        break
                
                if self.download_url and self._compare_versions(self.new_version, self.current_version) > 0:
                    return True, self.new_version, release_data.get('body', 'C·∫≠p nh·∫≠t m·ªõi c√≥ s·∫µn')
                else:
                    return False, self.current_version, "B·∫°n ƒëang s·ª≠ d·ª•ng phi√™n b·∫£n m·ªõi nh·∫•t"
            elif response.status_code == 404:
                # Repository kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng c√≥ quy·ªÅn truy c·∫≠p
                if github_token:
                    return False, None, f"Repository private kh√¥ng t√¨m th·∫•y ho·∫∑c token kh√¥ng h·ª£p l·ªá.\nKi·ªÉm tra l·∫°i GitHub token v√† quy·ªÅn truy c·∫≠p.\nURL: {self.update_server_url}"
                else:
                    return False, None, f"Repository kh√¥ng t·ªìn t·∫°i ho·∫∑c l√† private.\nN·∫øu repository l√† private, c·∫ßn th√™m GitHub token v√†o config.json.\nURL: {self.update_server_url}"
            elif response.status_code == 401:
                return False, None, f"GitHub token kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n.\nVui l√≤ng t·∫°o token m·ªõi v·ªõi quy·ªÅn 'repo' access."
            else:
                return False, None, f"Kh√¥ng th·ªÉ k·∫øt n·ªëi server c·∫≠p nh·∫≠t (HTTP {response.status_code})"
        except requests.RequestException as e:
            # Fallback: ki·ªÉm tra b·∫±ng c√°ch kh√°c ho·∫∑c th√¥ng b√°o offline
            error_msg = str(e)
            if "github.com" in error_msg:
                return False, None, f"Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn GitHub.\nKi·ªÉm tra k·∫øt n·ªëi internet ho·∫∑c GitHub c√≥ b·ªã ch·∫∑n.\nL·ªói: {error_msg}"
            return False, None, f"L·ªói k·∫øt n·ªëi: {error_msg}"
        except Exception as e:
            return False, None, f"L·ªói ki·ªÉm tra c·∫≠p nh·∫≠t: {str(e)}"
    
    def _compare_versions(self, v1, v2):
        """So s√°nh 2 version string (1.0.0 format)"""
        try:
            v1_parts = [int(x) for x in v1.split('.')]
            v2_parts = [int(x) for x in v2.split('.')]
            
            # Pad shorter version with zeros
            max_len = max(len(v1_parts), len(v2_parts))
            v1_parts.extend([0] * (max_len - len(v1_parts)))
            v2_parts.extend([0] * (max_len - len(v2_parts)))
            
            for i in range(max_len):
                if v1_parts[i] > v2_parts[i]:
                    return 1
                elif v1_parts[i] < v2_parts[i]:
                    return -1
            return 0
        except Exception:
            return 0
    
    def download_update(self, progress_callback=None):
        """Download file c·∫≠p nh·∫≠t"""
        try:
            self.temp_dir = tempfile.mkdtemp(prefix="itm_update_")
            file_name = os.path.basename(self.download_url)
            temp_file_path = os.path.join(self.temp_dir, file_name)
            
            response = requests.get(self.download_url, stream=True, timeout=30)
            total_size = int(response.headers.get('content-length', 0))
            downloaded = 0
            last_progress = 0
            
            with open(temp_file_path, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    if chunk:
                        f.write(chunk)
                        downloaded += len(chunk)
                        if progress_callback and total_size > 0:
                            progress = (downloaded / total_size) * 100
                            # Ch·ªâ update UI khi progress thay ƒë·ªïi ƒë√°ng k·ªÉ (m·ªói 1%)
                            if progress - last_progress >= 1.0:
                                progress_callback(progress)
                                last_progress = progress
            
            # ƒê·∫£m b·∫£o progress cu·ªëi c√πng l√† 100%
            if progress_callback:
                progress_callback(100.0)
            
            return temp_file_path
        except Exception as e:
            if self.temp_dir and os.path.exists(self.temp_dir):
                shutil.rmtree(self.temp_dir, ignore_errors=True)
            raise e
    
    def apply_update(self, downloaded_file_path):
        """√Åp d·ª•ng c·∫≠p nh·∫≠t m·ªôt c√°ch an to√†n"""
        try:
            current_exe_path = sys.executable if getattr(sys, 'frozen', False) else __file__
            current_dir = os.path.dirname(current_exe_path)
            backup_path = current_exe_path + ".backup"
            new_exe_path = current_exe_path + ".new"
            
            print(f"Applying update: {downloaded_file_path} -> {new_exe_path}")
            
            # Copy file m·ªõi v·ªõi t√™n t·∫°m th·ªùi (.new)
            shutil.copy2(downloaded_file_path, new_exe_path)
            print(f"Copied to: {new_exe_path}")
            
            # T·∫°o backup file hi·ªán t·∫°i (n·∫øu t·ªìn t·∫°i)
            if os.path.exists(current_exe_path):
                if os.path.exists(backup_path):
                    os.remove(backup_path)
                shutil.copy2(current_exe_path, backup_path)
                print(f"Backup created: {backup_path}")
            
            # Cleanup temp directory
            if self.temp_dir and os.path.exists(self.temp_dir):
                shutil.rmtree(self.temp_dir, ignore_errors=True)
                print("Temp directory cleaned up")
            
            print("Apply update completed successfully")
            return True
            
        except Exception as e:
            print(f"Error in apply_update: {e}")
            # Cleanup if failed
            if os.path.exists(new_exe_path):
                try:
                    os.remove(new_exe_path)
                    print(f"Cleaned up failed update file: {new_exe_path}")
                except Exception:
                    pass
            raise e
    
    def restart_application(self):
        """Kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng v·ªõi file m·ªõi - Simplified v·ªõi subprocess.Popen tr·ª±c ti·∫øp"""
        try:
            current_exe_path = sys.executable if getattr(sys, 'frozen', False) else __file__
            new_exe_path = current_exe_path + ".new"
            backup_path = current_exe_path + ".backup"
            app_dir = os.path.dirname(current_exe_path)
            
            print(f"üîÑ Setting up restart from: {current_exe_path}")
            print(f"üì¶ New exe available at: {new_exe_path}")
            print(f"üìÇ Working directory: {app_dir}")
            
            if getattr(sys, 'frozen', False):  # Executable mode
                print("üöÄ Creating simplified restart script...")
                
                # Simplified Python script v·ªõi multiple launch methods
                restart_script = f'''import os
import sys
import time
import subprocess
import shutil

print("[RESTART] ITM Translate Auto-Update Restart Process")
print("[RESTART] ==========================================")

# Paths
app_dir = r"{app_dir}"
current_exe = r"{current_exe_path}"
new_exe = r"{new_exe_path}"
backup_exe = r"{backup_path}"

print(f"[RESTART] App Dir: {{app_dir}}")
print(f"[RESTART] Current EXE: {{current_exe}}")
print(f"[RESTART] New EXE: {{new_exe}}")

# Change to app directory
os.chdir(app_dir)
print(f"[RESTART] Working in: {{os.getcwd()}}")

# Wait for parent process to fully exit
print("[RESTART] ‚è≥ Waiting for parent process to close (5 seconds)...")
time.sleep(5)

try:
    # Step 1: Verify new exe exists
    if not os.path.exists(new_exe):
        print(f"[RESTART] ‚ùå ERROR: New exe not found: {{new_exe}}")
        input("Press Enter to exit...")
        sys.exit(1)
    
    print(f"[RESTART] ‚úÖ New exe verified: {{os.path.getsize(new_exe)}} bytes")
    
    # Step 2: File operations
    print("[RESTART] üîÑ Starting file replacement...")
    
    # Remove old backup
    if os.path.exists(backup_exe):
        print(f"[RESTART] üóëÔ∏è Removing old backup: {{backup_exe}}")
        os.remove(backup_exe)
    
    # Backup current version
    if os.path.exists(current_exe):
        print(f"[RESTART] üíæ Creating backup: {{current_exe}} -> {{backup_exe}}")
        shutil.move(current_exe, backup_exe)
    
    # Install new version
    print(f"[RESTART] üì• Installing new version: {{new_exe}} -> {{current_exe}}")
    shutil.move(new_exe, current_exe)
    
    # Verify installation
    if not os.path.exists(current_exe):
        print("[RESTART] ‚ùå ERROR: Installation failed!")
        if os.path.exists(backup_exe):
            print("[RESTART] üîÑ Restoring backup...")
            shutil.move(backup_exe, current_exe)
        input("Press Enter to exit...")
        sys.exit(1)
    
    print(f"[RESTART] ‚úÖ Installation successful! Size: {{os.path.getsize(current_exe)}} bytes")
    
    # Step 3: Wait before restart ƒë·ªÉ tr√°nh DLL conflicts
    print("[RESTART] ‚è≥ Waiting before restart (3 seconds to avoid DLL conflicts)...")
    time.sleep(3)
    
    # Step 4: Launch new application v·ªõi multiple methods
    print(f"[RESTART] üöÄ Launching new application...")
    launch_success = False
    
    # Method 1: Simple subprocess.Popen (preferred)
    try:
        print("[RESTART] üî∏ Method 1: Simple Popen...")
        process = subprocess.Popen(
            [current_exe],
            cwd=app_dir,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
            stdin=subprocess.DEVNULL
        )
        
        # Verify process started and is still running
        time.sleep(1.5)
        if process.poll() is None:  # Still running
            print(f"[RESTART] ‚úÖ Success! Process running (PID: {{process.pid}})")
            launch_success = True
        else:
            print(f"[RESTART] ‚ö†Ô∏è Process exited immediately (code: {{process.returncode}})")
            
    except Exception as e1:
        print(f"[RESTART] ‚ùå Method 1 failed: {{e1}}")
    
    # Method 2: With shell=True
    if not launch_success:
        try:
            print("[RESTART] üî∏ Method 2: Popen with shell=True...")
            process = subprocess.Popen(
                current_exe,
                cwd=app_dir,
                shell=True,
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL,
                stdin=subprocess.DEVNULL
            )
            
            time.sleep(1.5)
            if process.poll() is None:
                print(f"[RESTART] ‚úÖ Success with shell=True! (PID: {{process.pid}})")
                launch_success = True
            else:
                print(f"[RESTART] ‚ö†Ô∏è Shell method process exited (code: {{process.returncode}})")
                
        except Exception as e2:
            print(f"[RESTART] ‚ùå Method 2 failed: {{e2}}")
    
    # Method 3: Windows START command
    if not launch_success:
        try:
            print("[RESTART] üî∏ Method 3: Windows START command...")
            subprocess.run(
                'start "" "' + current_exe + '"',
                cwd=app_dir,
                shell=True,
                check=False,
                timeout=5
            )
            print("[RESTART] ‚úÖ START command executed")
            launch_success = True
            
        except Exception as e3:
            print(f"[RESTART] ‚ùå Method 3 failed: {{e3}}")
    
    # Method 4: os.startfile (Windows specific)
    if not launch_success:
        try:
            print("[RESTART] üî∏ Method 4: os.startfile...")
            import os
            os.startfile(current_exe)
            print("[RESTART] ‚úÖ os.startfile executed")
            launch_success = True
            
        except Exception as e4:
            print(f"[RESTART] ‚ùå Method 4 failed: {{e4}}")
    
    if not launch_success:
        print("[RESTART] ‚ùå All launch methods failed!")
        print("[RESTART] üîß Please manually run the application:")
        print(f"[RESTART]    {{current_exe}}")
        input("Press Enter to continue...")
    else:
        print("[RESTART] üéâ Application launch successful!")
    
    # Step 5: Cleanup
    print("[RESTART] üßπ Cleaning up...")
    time.sleep(2)  # Wait a bit before cleanup
    
    if os.path.exists(backup_exe):
        try:
            os.remove(backup_exe)
            print(f"[RESTART] üóëÔ∏è Backup removed: {{backup_exe}}")
        except Exception:
            print(f"[RESTART] ‚ö†Ô∏è Could not remove backup (may be in use)")
    
    print("[RESTART] ‚úÖ Update process completed successfully!")
    print("[RESTART] üëã Restart script will now exit.")
    
except Exception as e:
    print(f"[RESTART] üí• CRITICAL ERROR: {{e}}")
    import traceback
    traceback.print_exc()
    
    # Try to restore backup
    if os.path.exists(backup_exe) and not os.path.exists(current_exe):
        try:
            shutil.move(backup_exe, current_exe)
            print("[RESTART] üîÑ Backup restored due to error")
        except Exception:
            pass
    
    print("[RESTART] ‚ùå Update failed. Please check manually.")
    input("Press Enter to exit...")
    sys.exit(1)

# Clean exit
time.sleep(1)
sys.exit(0)
'''
                
                # Write restart script
                script_path = os.path.join(app_dir, "restart_updater.py")
                print(f"üìù Creating restart script: {script_path}")
                
                try:
                    with open(script_path, 'w', encoding='utf-8') as f:
                        f.write(restart_script)
                    print(f"‚úÖ Restart script created successfully")
                except Exception as e:
                    print(f"‚ùå Failed to create restart script: {e}")
                    raise e
                
                # Verify script exists
                if not os.path.exists(script_path):
                    raise Exception(f"Restart script not created: {script_path}")
                
                print(f"üöÄ Launching restart script...")
                
                # Launch restart script v·ªõi Python
                try:
                    # Find python executable
                    python_exe = sys.executable
                    
                    # For frozen apps, try to find system python
                    if getattr(sys, 'frozen', False):
                        possible_pythons = [
                            "python",
                            "python.exe",
                            "python3",
                            "python3.exe"
                        ]
                        
                        for py_cmd in possible_pythons:
                            try:
                                result = subprocess.run([py_cmd, "--version"], 
                                                      capture_output=True, timeout=3, text=True)
                                if result.returncode == 0:
                                    python_exe = py_cmd
                                    print(f"‚úÖ Found Python: {python_exe} ({result.stdout.strip()})")
                                    break
                            except Exception:
                                continue
                    
                    # Launch restart script with visible console for debugging
                    print(f"üéØ Using Python: {python_exe}")
                    process = subprocess.Popen(
                        [python_exe, script_path],
                        cwd=app_dir,
                        creationflags=subprocess.CREATE_NEW_CONSOLE if hasattr(subprocess, 'CREATE_NEW_CONSOLE') else 0
                    )
                    print(f"‚úÖ Restart script launched successfully (PID: {process.pid})")
                    
                except Exception as e:
                    print(f"‚ùå Failed to launch restart script: {e}")
                    # Fallback: try to use system() call
                    try:
                        print("üîÑ Trying fallback method with os.system...")
                        import os
                        os.system(f'python "{script_path}"')
                        print("‚úÖ Fallback launch attempt completed")
                    except Exception as e2:
                        print(f"‚ùå Fallback also failed: {e2}")
                        raise e
                
            else:
                # Development mode
                print("üõ†Ô∏è Development mode restart")
                restart_script = f'''
import os
import sys
import time
import subprocess

print("üõ†Ô∏è Development restart script starting...")
time.sleep(3)
print("üìÇ Changing to app directory...")
os.chdir(r"{app_dir}")
print("üöÄ Starting application...")
subprocess.Popen([sys.executable, r"{current_exe_path}"])
print("‚úÖ Development restart completed")
'''
                script_path = os.path.join(app_dir, "dev_restart.py")
                with open(script_path, 'w', encoding='utf-8') as f:
                    f.write(restart_script)
                
                subprocess.Popen([sys.executable, script_path], cwd=app_dir)
            
            print("üîÑ Restart process initiated!")
            print("‚è≥ Waiting 2 seconds before exit...")
            
            # Delay ƒë·ªÉ script c√≥ th·ªùi gian kh·ªüi ƒë·ªông
            import time
            time.sleep(2)
            
            # Force exit current process
            print("üëã Exiting current process...")
            sys.exit(0)
            
        except Exception as e:
            print(f"üí• Critical error in restart_application: {e}")
            import traceback
            traceback.print_exc()
            raise e

class UpdateDialog:
    def __init__(self, parent, updater, has_update=False, new_version="", changelog=""):
        self.updater = updater
        self.parent = parent
        self.dialog = None
        self.progress_var = None
        self.progress_bar = None
        self.status_label = None
        
        self.show_dialog(has_update, new_version, changelog)
    
    def show_dialog(self, has_update, new_version, changelog):
        """Hi·ªÉn th·ªã dialog c·∫≠p nh·∫≠t"""
        self.dialog = tk.Toplevel(self.parent)
        self.dialog.title("ITM Translate - Ki·ªÉm tra c·∫≠p nh·∫≠t")
        self.dialog.geometry("500x500")
        self.dialog.resizable(False, False)
        self.dialog.transient(self.parent)
        self.dialog.grab_set()
        
        # Center the dialog
        self.dialog.update_idletasks()
        x = (self.dialog.winfo_screenwidth() // 2) - (500 // 2)
        y = (self.dialog.winfo_screenheight() // 2) - (500 // 2)
        self.dialog.geometry(f"500x500+{x}+{y}")
        
        # Main frame
        main_frame = tk.Frame(self.dialog, padx=20, pady=20)
        main_frame.pack(fill='both', expand=True)
        
        if has_update:
            # Update available
            title_label = tk.Label(main_frame, text="üéâ C·∫≠p nh·∫≠t m·ªõi c√≥ s·∫µn!", 
                                 font=('Segoe UI', 16, 'bold'), fg='#2e7d32')
            title_label.pack(pady=(0, 10))
            
            version_label = tk.Label(main_frame, 
                                   text=f"Phi√™n b·∫£n hi·ªán t·∫°i: {self.updater.current_version}\nPhi√™n b·∫£n m·ªõi: {new_version}",
                                   font=('Segoe UI', 11))
            version_label.pack(pady=(0, 15))
            
            # Changelog
            changelog_label = tk.Label(main_frame, text="N·ªôi dung c·∫≠p nh·∫≠t:", 
                                     font=('Segoe UI', 12, 'bold'))
            changelog_label.pack(anchor='w', pady=(0, 5))
            
            changelog_frame = tk.Frame(main_frame, relief='sunken', bd=1)
            changelog_frame.pack(fill='both', expand=True, pady=(0, 15))
            
            changelog_text = tk.Text(changelog_frame, wrap='word', font=('Segoe UI', 10),
                                   height=8, state='disabled')
            scrollbar = tk.Scrollbar(changelog_frame, orient='vertical', command=changelog_text.yview)
            changelog_text.configure(yscrollcommand=scrollbar.set)
            
            changelog_text.pack(side='left', fill='both', expand=True)
            scrollbar.pack(side='right', fill='y')
            
            changelog_text.config(state='normal')
            changelog_text.insert('1.0', changelog)
            changelog_text.config(state='disabled')
            
            # Progress bar (hidden initially)
            progress_frame = tk.Frame(main_frame)
            progress_frame.pack(fill='x', pady=(0, 10))
            
            self.progress_var = tk.DoubleVar()
            self.progress_bar = ttk.Progressbar(progress_frame, variable=self.progress_var, 
                                              maximum=100, length=460)
            
            self.status_label = tk.Label(progress_frame, text="", font=('Segoe UI', 9))
            
            # Buttons
            self.button_frame = tk.Frame(main_frame)
            self.button_frame.pack(fill='x')
            
            self.update_btn = tk.Button(self.button_frame, text="C·∫≠p nh·∫≠t ngay", 
                                 command=self.start_update, font=('Segoe UI', 10),
                                 bg='#2e7d32', fg='white', padx=20)
            self.update_btn.pack(side='right', padx=(10, 0))
            
            self.cancel_btn = tk.Button(self.button_frame, text="ƒê·ªÉ sau", 
                                 command=self.dialog.destroy, font=('Segoe UI', 10),
                                 padx=20)
            self.cancel_btn.pack(side='right')
            
        else:
            # No update available
            title_label = tk.Label(main_frame, text="‚úÖ ƒê√£ c·∫≠p nh·∫≠t!", 
                                 font=('Segoe UI', 16, 'bold'), fg='#1976d2')
            title_label.pack(pady=(50, 20))
            
            message_label = tk.Label(main_frame, text=changelog, 
                                   font=('Segoe UI', 12), wraplength=400)
            message_label.pack(pady=(0, 50))
            
            ok_btn = tk.Button(main_frame, text="OK", 
                             command=self.dialog.destroy, font=('Segoe UI', 10),
                             bg='#1976d2', fg='white', padx=30)
            ok_btn.pack()
    
    def start_update(self):
        """B·∫Øt ƒë·∫ßu qu√° tr√¨nh c·∫≠p nh·∫≠t"""
        # Show progress UI
        self.progress_bar.pack(fill='x', pady=(0, 5))
        self.status_label.pack()
        
        # ·∫®n c·∫£ hai n√∫t "C·∫≠p nh·∫≠t ngay" v√† "ƒê·ªÉ sau"
        self.update_btn.pack_forget()
        self.cancel_btn.pack_forget()
        
        # Start download in background thread
        threading.Thread(target=self._download_and_update, daemon=True).start()
    
    def _download_and_update(self):
        """Download v√† c·∫≠p nh·∫≠t (ch·∫°y trong background thread)"""
        try:
            # Download
            self.dialog.after(0, lambda: self.status_label.config(text="ƒêang t·∫£i xu·ªëng..."))
            downloaded_file = self.updater.download_update(self._update_progress)
            
            # Apply update - Th√™m th√¥ng b√°o progress chi ti·∫øt h∆°n
            self.dialog.after(0, lambda: (
                self.status_label.config(text="ƒêang chu·∫©n b·ªã c√†i ƒë·∫∑t..."),
                self.progress_var.set(95)
            ))
            
            # Th√™m small delay ƒë·ªÉ UI update
            import time
            time.sleep(0.5)
            
            self.dialog.after(0, lambda: (
                self.status_label.config(text="ƒêang sao ch√©p file..."),
                self.progress_var.set(98)
            ))
            
            self.updater.apply_update(downloaded_file)
            
            self.dialog.after(0, lambda: (
                self.status_label.config(text="Ho√†n t·∫•t!"),
                self.progress_var.set(100)
            ))
            
            # Success
            self.dialog.after(0, self._update_success)
            
        except Exception as e:
            self.dialog.after(0, lambda: self._update_error(str(e)))
    
    def _update_progress(self, progress):
        """C·∫≠p nh·∫≠t progress bar m·ªôt c√°ch an to√†n"""
        try:
            self.dialog.after(0, lambda: self.progress_var.set(progress))
        except Exception:
            # B·ªè qua n·∫øu dialog ƒë√£ b·ªã ƒë√≥ng
            pass
    
    def _update_success(self):
        """X·ª≠ l√Ω khi c·∫≠p nh·∫≠t th√†nh c√¥ng"""
        try:
            self.status_label.config(text="C·∫≠p nh·∫≠t th√†nh c√¥ng! S·∫µn s√†ng kh·ªüi ƒë·ªông l·∫°i...")
            
            # ƒê·ª£i 1 gi√¢y ƒë·ªÉ user th·∫•y message
            self.dialog.after(1000, self._show_restart_dialog)
        except Exception as e:
            print(f"Error in _update_success: {e}")
            # Fallback: hi·ªán message ngay l·∫≠p t·ª©c
            self._show_restart_dialog()
    
    def _show_restart_dialog(self):
        """Hi·ªÉn th·ªã dialog kh·ªüi ƒë·ªông l·∫°i"""
        result = messagebox.askyesnocancel("C·∫≠p nh·∫≠t th√†nh c√¥ng", 
                                         "C·∫≠p nh·∫≠t ƒë√£ ho√†n t·∫•t!\n\n" +
                                         "Ch·ªçn c√°ch kh·ªüi ƒë·ªông l·∫°i:\n" +
                                         "‚Ä¢ YES: T·ª± ƒë·ªông kh·ªüi ƒë·ªông l·∫°i (ƒë√£ c·∫£i thi·ªán)\n" +
                                         "‚Ä¢ NO: Kh·ªüi ƒë·ªông th·ªß c√¥ng (khuy·∫øn ngh·ªã n·∫øu g·∫∑p l·ªói)\n" +
                                         "‚Ä¢ CANCEL: Ti·∫øp t·ª•c v·ªõi phi√™n b·∫£n c≈©\n\n" +
                                         "L∆∞u √Ω: ƒê√£ th√™m delay 5 gi√¢y ƒë·ªÉ tr√°nh l·ªói DLL.\n" +
                                         "N·∫øu v·∫´n g·∫∑p l·ªói DLL, h√£y ch·ªçn NO.",
                                         parent=self.dialog)
        if result is True:  # YES - Auto restart (experimental)
            try:
                self.updater.restart_application()
            except Exception as e:
                error_detail = str(e)
                if "pydantic" in error_detail.lower() or "module" in error_detail.lower():
                    messagebox.showerror("L·ªói kh·ªüi ƒë·ªông l·∫°i", 
                                       f"Kh·ªüi ƒë·ªông t·ª± ƒë·ªông th·∫•t b·∫°i do l·ªói dependencies:\n{error_detail}\n\n" +
                                       "GI·∫¢I PH√ÅP:\n" +
                                       "1. Tho√°t ch∆∞∆°ng tr√¨nh ho√†n to√†n (Alt+F4)\n" +
                                       "2. Restart m√°y t√≠nh (khuy·∫øn ngh·ªã)\n" +
                                       "3. Ch·∫°y l·∫°i ITM_Translate.exe\n" +
                                       "4. N·∫øu v·∫´n l·ªói, download l·∫°i t·ª´ GitHub\n\n" +
                                       "L·ªói n√†y th∆∞·ªùng do PyInstaller bundling issue.",
                                       parent=self.dialog)
                else:
                    messagebox.showerror("L·ªói kh·ªüi ƒë·ªông l·∫°i", 
                                       f"Kh·ªüi ƒë·ªông t·ª± ƒë·ªông th·∫•t b·∫°i:\n{error_detail}\n\n" +
                                       "H√£y l√†m theo h∆∞·ªõng d·∫´n th·ªß c√¥ng:\n" +
                                       "1. Tho√°t ch∆∞∆°ng tr√¨nh (Alt+F4)\n" +
                                       "2. V√†o th∆∞ m·ª•c ch∆∞∆°ng tr√¨nh\n" +
                                       "3. X√≥a file .backup n·∫øu c√≥\n" +
                                       "4. Ch·∫°y ITM_Translate.exe\n\n" +
                                       "N·∫øu v·∫´n l·ªói DLL, restart m√°y t√≠nh v√† th·ª≠ l·∫°i.",
                                       parent=self.dialog)
        elif result is False:  # NO - Manual restart (recommended)
            self._show_manual_restart_instructions()
        # result is None (CANCEL) - Do nothing, keep current version
    
    def _show_manual_restart_instructions(self):
        """Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n kh·ªüi ƒë·ªông th·ªß c√¥ng chi ti·∫øt"""
        instructions = """‚úÖ C·∫¨P NH·∫¨T HO√ÄN T·∫§T - H∆∞·ªõng d·∫´n kh·ªüi ƒë·ªông th·ªß c√¥ng

üîß B∆Ø·ªöC 1: Tho√°t ch∆∞∆°ng tr√¨nh
‚Ä¢ Nh·∫•n Alt+F4 ho·∫∑c ƒë√≥ng t·∫•t c·∫£ c·ª≠a s·ªï ITM Translate
‚Ä¢ ƒê·∫£m b·∫£o kh√¥ng c√≤n process n√†o ƒëang ch·∫°y

üìÅ B∆Ø·ªöC 2: V√†o th∆∞ m·ª•c ch∆∞∆°ng tr√¨nh
‚Ä¢ M·ªü th∆∞ m·ª•c ch·ª©a file ITM_Translate.exe
‚Ä¢ B·∫°n s·∫Ω th·∫•y c√°c file: .exe, .new, .backup

üîÑ B∆Ø·ªöC 3: Th·ª±c hi·ªán c·∫≠p nh·∫≠t
‚Ä¢ X√≥a file ITM_Translate.exe (file c≈©)
‚Ä¢ ƒê·ªïi t√™n ITM_Translate.exe.new th√†nh ITM_Translate.exe
‚Ä¢ X√≥a file .backup (n·∫øu c√≥)

üöÄ B∆Ø·ªöC 4: Kh·ªüi ƒë·ªông l·∫°i
‚Ä¢ KHUY·∫æN NGH·ªä: Restart m√°y t√≠nh tr∆∞·ªõc
‚Ä¢ Ch·∫°y file ITM_Translate.exe m·ªõi
‚Ä¢ Ki·ªÉm tra version trong settings

‚ö†Ô∏è N·∫æU G·∫∂P L·ªñI "No module named 'pydantic_core'":
‚Ä¢ ƒê√¢y l√† l·ªói PyInstaller bundling
‚Ä¢ PH·∫¢I restart m√°y t√≠nh
‚Ä¢ Ch·∫°y v·ªõi quy·ªÅn Administrator
‚Ä¢ T·∫°m th·ªùi disable antivirus
‚Ä¢ N·∫øu v·∫´n l·ªói: download l·∫°i t·ª´ GitHub releases

‚ö†Ô∏è N·∫æU G·∫∂P L·ªóI "Failed to load Python DLL":
‚Ä¢ Restart m√°y t√≠nh (b·∫Øt bu·ªôc)
‚Ä¢ Ch·∫°y v·ªõi quy·ªÅn Administrator
‚Ä¢ Ki·ªÉm tra antivirus kh√¥ng block file

B·∫°n c√≥ mu·ªën m·ªü th∆∞ m·ª•c ch∆∞∆°ng tr√¨nh kh√¥ng?"""
        
        response = messagebox.askyesno("H∆∞·ªõng d·∫´n c·∫≠p nh·∫≠t th·ªß c√¥ng", instructions, parent=self.dialog)
        if response:
            # M·ªü th∆∞ m·ª•c ch·ª©a executable
            current_exe_path = sys.executable if getattr(sys, 'frozen', False) else __file__
            folder_path = os.path.dirname(current_exe_path)
            try:
                os.startfile(folder_path)
            except Exception:
                pass
        
        self.dialog.destroy()
    
    def _update_error(self, error_msg):
        """X·ª≠ l√Ω khi c·∫≠p nh·∫≠t l·ªói"""
        self.status_label.config(text=f"L·ªói: {error_msg}")
        
        # Hi·ªÉn th·ªã l·∫°i c√°c n√∫t ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ th·ª≠ l·∫°i ho·∫∑c h·ªßy
        self.update_btn.pack(side='right', padx=(10, 0))
        self.cancel_btn.pack(side='right')
        
        messagebox.showerror("L·ªói c·∫≠p nh·∫≠t", f"Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t:\n{error_msg}", 
                           parent=self.dialog)

def check_for_updates_async(parent_window, show_no_update=True):
    """Ki·ªÉm tra c·∫≠p nh·∫≠t async (ƒë∆∞·ª£c g·ªçi t·ª´ GUI)"""
    def check_updates():
        updater = Updater()
        updater.current_version = updater.get_current_version()
        
        has_update, version, message = updater.check_for_updates()
        
        # Show dialog in main thread
        if has_update or show_no_update:
            parent_window.after(0, lambda: UpdateDialog(parent_window, updater, has_update, version, message))
    
    threading.Thread(target=check_updates, daemon=True).start()