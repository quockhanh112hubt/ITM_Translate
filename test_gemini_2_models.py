#!/usr/bin/env python3
"""
Test script ƒë·ªÉ ki·ªÉm tra Gemini 2.0 models c√≥ ho·∫°t ƒë·ªông kh√¥ng
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.api_key_manager import api_key_manager, AIProvider
from core.ai_providers import GeminiProvider

def test_gemini_2_models():
    """Test Gemini 2.0 models"""
    print("=== KI·ªÇM TRA GEMINI 2.0 MODELS ===\n")
    
    # L·∫•y Gemini keys
    gemini_keys = api_key_manager.get_keys_by_provider(AIProvider.GEMINI)
    
    if not gemini_keys:
        print("‚ùå Kh√¥ng c√≥ Gemini API key n√†o ƒë∆∞·ª£c c·∫•u h√¨nh")
        print("üí° Vui l√≤ng th√™m Gemini API key trong GUI tr∆∞·ªõc")
        return
    
    print(f"‚úÖ T√¨m th·∫•y {len(gemini_keys)} Gemini key(s)")
    
    # Test v·ªõi model m·ªõi
    test_models = [
        'gemini-2.0-flash-exp',
        'gemini-1.5-flash-8b',
        'gemini-1.5-flash'  # ƒë·ªÉ so s√°nh
    ]
    
    test_text = "Hello, world!"
    target_lang = "vi"
    
    for model in test_models:
        print(f"\nüß™ Testing model: {model}")
        print("-" * 50)
        
        try:
            # T·∫°o provider v·ªõi model c·ª• th·ªÉ
            key_info = gemini_keys[0]  # D√πng key ƒë·∫ßu ti√™n
            provider = GeminiProvider(key_info.key, model)
            
            print(f"üì§ Input: '{test_text}' -> {target_lang}")
            print("‚è≥ ƒêang d·ªãch...")
            
            result = provider.translate(test_text, target_lang)
            
            if result:
                print(f"‚úÖ Output: '{result}'")
                print(f"üéâ Model {model} ho·∫°t ƒë·ªông t·ªët!")
            else:
                print(f"‚ùå Model {model} kh√¥ng tr·∫£ v·ªÅ k·∫øt qu·∫£")
                
        except Exception as e:
            error_msg = str(e)
            if "not found" in error_msg.lower() or "does not exist" in error_msg.lower():
                print(f"‚ö†Ô∏è  Model {model} c√≥ th·ªÉ ch∆∞a available ho·∫∑c c·∫ßn access ƒë·∫∑c bi·ªát")
            else:
                print(f"‚ùå L·ªói: {error_msg}")

def show_model_availability_info():
    """Hi·ªÉn th·ªã th√¥ng tin v·ªÅ availability c·ªßa models"""
    print("\n=== TH√îNG TIN MODEL AVAILABILITY ===\n")
    
    print("üìã Gemini Models Status:")
    print("‚Ä¢ gemini-1.5-flash     ‚úÖ Stable, Available")
    print("‚Ä¢ gemini-1.5-pro       ‚úÖ Stable, Available") 
    print("‚Ä¢ gemini-2.0-flash-exp ‚ö†Ô∏è  Experimental, C√≥ th·ªÉ c·∫ßn access")
    print("‚Ä¢ gemini-1.5-flash-8b  ‚ö†Ô∏è  M·ªõi, C√≥ th·ªÉ c·∫ßn access")
    
    print("\nüí° Tips:")
    print("‚Ä¢ N·∫øu model experimental kh√¥ng ho·∫°t ƒë·ªông, h√£y d√πng stable models")
    print("‚Ä¢ Ki·ªÉm tra Google AI Studio ƒë·ªÉ xem models n√†o available")
    print("‚Ä¢ M·ªôt s·ªë models c√≥ th·ªÉ c·∫ßn waitlist ho·∫∑c special access")

if __name__ == "__main__":
    test_gemini_2_models()
    show_model_availability_info()
    
    print("\n=== K·∫æT LU·∫¨N ===")
    print("‚úÖ Dropdown selection ƒë√£ c√≥ Gemini 2.0 models")
    print("‚úÖ User c√≥ th·ªÉ ch·ªçn models m·ªõi trong GUI") 
    print("‚ö†Ô∏è  M·ªôt s·ªë models experimental c√≥ th·ªÉ c·∫ßn access ƒë·∫∑c bi·ªát")
    print("üí° N·∫øu model kh√¥ng ho·∫°t ƒë·ªông, h·ªá th·ªëng s·∫Ω fallback v·ªÅ model kh√°c")
